[
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/context/color-context/color-context.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/context/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/next-env.d.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/pages/500.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/pages/_app.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'LayoutProps' is defined but never used.",
        "line": 17,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-empty-interface",
        "severity": 2,
        "message": "An interface declaring no members is equivalent to its supertype.",
        "line": 98,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "noEmptyWithSuper",
        "endLine": 98,
        "endColumn": 25,
        "fix": {
          "range": [
            3060,
            3099
          ],
          "text": "type DefaultTheme = Theme"
        },
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/* eslint-disable @typescript-eslint/no-empty-interface */\nimport React, { useEffect, useState } from 'react';\nimport Head from 'next/head';\n\nimport { getDesignTokens } from '../styles/theme/theme';\nimport createEmotionCache from '../src/emotion-cache/create-emotion-cache';\nimport { CacheProvider, EmotionCache } from '@emotion/react';\nimport '../styles/globals.css';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { createTheme, Theme, ThemeProvider } from '@mui/material/styles';\nimport { CssBaseline, responsiveFontSizes } from '@mui/material';\nimport { AppProps } from 'next/app';\n\n// When using TypeScript 4.x and above\nimport { Layout, LayoutProps } from '../src/components/layout/layout';\nimport { ColorModeContext } from 'context';\nimport { LocalizationProvider } from '@mui/x-date-pickers';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n\n// Client-side cache, shared for the whole session of the user in the browser.\nconst clientSideEmotionCache = createEmotionCache();\n\ntype AppPropsWithApm = AppProps & {\n  emotionCache?: EmotionCache;\n};\n\nconst App = ({\n  Component,\n  pageProps,\n  emotionCache = clientSideEmotionCache\n}: AppPropsWithApm) => {\n  const [mode, setMode] = useState<string>('dark');\n  const [mounted, setMounted] = useState<boolean>(false);\n\n  useEffect(() => {\n    setMounted(true);\n  }, [mode]);\n\n  const colorMode = React.useMemo(\n    () => ({\n      toggleColorMode: () => {\n        setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\n      }\n    }),\n    []\n  );\n\n  const theme: Theme = React.useMemo(() => {\n    return responsiveFontSizes(createTheme(getDesignTokens(mode)));\n  }, [mode]);\n\n  return (\n    <React.Fragment>\n      <CacheProvider value={emotionCache}>\n        <Head>\n          <title>PM4 - Parkship</title>\n          <meta\n            name=\"viewport\"\n            content=\"minimum-scale=1, initial-scale=1, width=device-width\"\n          />\n          <meta name=\"description\" content=\"This is a project.\" />\n        </Head>\n        {mounted && (\n          <ColorModeContext.Provider value={colorMode}>\n            <ThemeProvider theme={theme}>\n              <CssBaseline enableColorScheme>\n                <ToastContainer\n                  position=\"bottom-right\"\n                  autoClose={3000}\n                  hideProgressBar={false}\n                  newestOnTop={false}\n                  closeOnClick\n                  rtl={false}\n                  pauseOnFocusLoss\n                  draggable\n                  pauseOnHover\n                  limit={5}\n                />\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                  <Layout>\n                    <Component {...pageProps} />\n                  </Layout>\n                </LocalizationProvider>\n              </CssBaseline>\n            </ThemeProvider>\n          </ColorModeContext.Provider>\n        )}\n      </CacheProvider>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n\ndeclare module '@mui/styles/defaultTheme' {\n  interface DefaultTheme extends Theme {}\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/pages/_document.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 85,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 85,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2896,
                2899
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2896,
                2899
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 75,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 75,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2438,
                2441
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2438,
                2441
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import * as React from 'react';\nimport Document, { Head, Html, Main, NextScript } from 'next/document';\nimport createEmotionServer from '@emotion/server/create-instance';\nimport createEmotionCache from '../src/emotion-cache/create-emotion-cache';\n\nexport default class MyDocument extends Document {\n  render() {\n    return (\n      <Html lang=\"de\">\n        {/* SEO Part */}\n        <Head>\n          <link\n            rel=\"stylesheet\"\n            href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\"\n          />\n          <link rel=\"shortcut icon\" href=\"/favicon.ico\" />\n          <link rel=\"apple-touch-icon\" href=\"/icons/logo.jpg\" />\n          <meta name=\"robots\" content=\"all\" />\n          <meta name=\"googlebot\" content=\"noindex,nofollow\" />\n          <meta name=\"google\" content=\"nositelinkssearchbox\" />\n          <meta name=\"mobile-web-app-capable\" content=\"yes\" />\n          <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n          <link rel=\"apple-touch-icon\" href=\"/icons/logo.jpg\" />\n          <link rel=\"manifest\" href=\"/manifest.json\" />\n\n          <link\n            href=\"https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,400;0,500;0,700;1,700;1,900&display=swap\"\n            rel=\"stylesheet\"\n          />\n        </Head>\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n\n// `getInitialProps` belongs to `_document` (instead of `_app`),\n// it's compatible with static-site generation (SSG).\nMyDocument.getInitialProps = async (ctx) => {\n  // Resolution order\n  //\n  // On the server:\n  // 1. app.getInitialProps\n  // 2. page.getInitialProps\n  // 3. document.getInitialProps\n  // 4. app.render\n  // 5. page.render\n  // 6. document.render\n  //\n  // On the server with error:\n  // 1. document.getInitialProps\n  // 2. app.render\n  // 3. page.render\n  // 4. document.render\n  //\n  // On the client\n  // 1. app.getInitialProps\n  // 2. page.getInitialProps\n  // 3. app.render\n  // 4. page.render\n\n  const originalRenderPage = ctx.renderPage;\n\n  // You can consider sharing the same Emotion cache between all the SSR requests to speed up performance.\n  // However, be aware that it can have global side effects.\n  const cache = createEmotionCache();\n  const { extractCriticalToChunks } = createEmotionServer(cache);\n\n  ctx.renderPage = () =>\n    originalRenderPage({\n      /* eslint-disable-next-line */\n      enhanceApp: (App: any) =>\n        function EnhanceApp(props) {\n          return <App emotionCache={cache} {...props} />;\n        }\n    });\n\n  const initialProps = await Document.getInitialProps(ctx);\n  // This is important. It prevents Emotion to render invalid HTML.\n  // See https://github.com/mui/material-ui/issues/26561#issuecomment-855286153\n  const emotionStyles = extractCriticalToChunks(initialProps.html);\n  const emotionStyleTags = emotionStyles.styles.map((style: any) => (\n    <style\n      data-emotion={`${style.key} ${style.ids.join(' ')}`}\n      key={style.key}\n      dangerouslySetInnerHTML={{ __html: style.css }}\n    />\n  ));\n\n  return {\n    ...initialProps,\n    styles: [\n      ...React.Children.toArray(initialProps.styles),\n      ...emotionStyleTags\n    ]\n  };\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/pages/api/events.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/pages/api/health.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/pages/api/image-logo-proxy.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/pages/api/login.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/pages/api/logout.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/pages/api/user.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/pages/index.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'router' is assigned a value but never used.",
        "line": 9,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'theme' is defined but never used.",
        "line": 34,
        "column": 31,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 34,
        "endColumn": 36
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport { useRouter } from 'next/router';\nimport { Button, Grid } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport Link from 'src/components/link/link';\n\nconst Index = () => {\n  const classes = useStyles();\n  const router = useRouter();\n\n  return (\n    <div className={classes.superRoot}>\n      <Grid container justifyContent=\"center\" display=\"flex\">\n        <Link\n          href={'https://github.com/pm4-parkship/parkship/tree/main/frontend'}\n          skipLocaleHandling\n        >\n          <Button variant=\"contained\">Click Me</Button>\n        </Link>\n\n        <Link\n          href={{\n            pathname: '/info/test',\n            query: { locale: 'en' }\n          }}\n        >\n          <Button variant=\"contained\">Click Me Inside</Button>\n        </Link>\n      </Grid>\n    </div>\n  );\n};\n\nconst useStyles = makeStyles((theme) => ({\n  superRoot: {\n    maxWidth: '2000px',\n    margin: '0 auto'\n  }\n}));\n\nexport default Index;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/pages/info/index.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/pages/info/test.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'router' is assigned a value but never used.",
        "line": 9,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'theme' is defined but never used.",
        "line": 20,
        "column": 31,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 36
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport { useRouter } from 'next/router';\nimport { Grid } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport MyDummyComponentPage from '../../src/components/test/test';\n\nconst Index = () => {\n  const classes = useStyles();\n  const router = useRouter();\n\n  return (\n    <div className={classes.superRoot}>\n      <Grid container justifyContent=\"center\" display=\"flex\">\n        <MyDummyComponentPage />\n      </Grid>\n    </div>\n  );\n};\n\nconst useStyles = makeStyles((theme) => ({\n  superRoot: {\n    maxWidth: '2000px',\n    margin: '0 auto',\n    animation: '$bounce 2s infinite'\n  },\n  '@keyframes bounce': {\n    '0%': {\n      transform: 'translateY(0)'\n    },\n    '50%': {\n      transform: 'translateY(-10px)'\n    },\n    '100%': {\n      transform: 'translateY(0)'\n    }\n  }\n}));\n\nexport default Index;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/pages/login.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/pages/profile-ssr.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/pages/profile/index.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/src/auth/fetchJson.ts",
    "messages": [
      {
        "ruleId": "unicorn/filename-case",
        "severity": 2,
        "message": "Filename is not in kebab case. Rename it to `fetch-json.ts`.",
        "line": 1,
        "column": 1,
        "nodeType": null,
        "messageId": "filename-case"
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "export class FetchError extends Error {\n  response: Response;\n  data: {\n    message: string;\n  };\n  constructor({\n    message,\n    response,\n    data\n  }: {\n    message: string;\n    response: Response;\n    data: {\n      message: string;\n    };\n  }) {\n    // Pass remaining arguments (including vendor specific ones) to parent constructor\n    super(message);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, FetchError);\n    }\n\n    this.name = 'FetchError';\n    this.response = response;\n    this.data = data ?? { message: message };\n  }\n}\n\nexport default async function fetchJson<JSON = unknown>(\n  input: RequestInfo,\n  init?: RequestInit\n): Promise<JSON> {\n  const response = await fetch(input, init);\n\n  // if the server replies, there's always some data in json\n  // if there's a network error, it will throw at the previous line\n  const data = await response.json();\n\n  // response.ok is true when res.status is 2xx\n  // https://developer.mozilla.org/en-US/docs/Web/API/Response/ok\n  if (response.ok) {\n    return data;\n  }\n\n  throw new FetchError({\n    message: response.statusText,\n    response,\n    data\n  });\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/src/auth/form.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/src/auth/session.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/src/auth/useEvents.ts",
    "messages": [
      {
        "ruleId": "unicorn/filename-case",
        "severity": 2,
        "message": "Filename is not in kebab case. Rename it to `use-events.ts`.",
        "line": 1,
        "column": 1,
        "nodeType": null,
        "messageId": "filename-case"
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import useSWR from 'swr';\nimport type { User } from 'pages/api/user';\nimport type { Events } from 'pages/api/events';\n\nexport default function useEvents(user: User | undefined) {\n  // We do a request to /api/events only if the user is logged in\n  const { data: events } = useSWR<Events>(\n    user?.isLoggedIn ? `/api/events` : null\n  );\n\n  return { events };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/src/auth/useUser.ts",
    "messages": [
      {
        "ruleId": "unicorn/filename-case",
        "severity": 2,
        "message": "Filename is not in kebab case. Rename it to `use-user.ts`.",
        "line": 1,
        "column": 1,
        "nodeType": null,
        "messageId": "filename-case"
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useEffect } from 'react';\nimport Router from 'next/router';\nimport useSWR from 'swr';\nimport { User } from 'pages/api/user';\n\nexport default function useUser({\n  redirectTo = '',\n  redirectIfFound = false\n} = {}) {\n  const { data: user, mutate: mutateUser } = useSWR<User>('/api/user');\n\n  useEffect(() => {\n    // if no redirect needed, just return (example: already on /dashboard)\n    // if user data not yet there (fetch in progress, logged in or not) then don't do anything yet\n    if (!redirectTo || !user) return;\n\n    if (\n      // If redirectTo is set, redirect if the user was not found.\n      (redirectTo && !redirectIfFound && !user?.isLoggedIn) ||\n      // If redirectIfFound is also set, redirect if the user was found\n      (redirectIfFound && user?.isLoggedIn)\n    ) {\n      Router.push(redirectTo);\n    }\n  }, [user, redirectIfFound, redirectTo]);\n\n  return { user, mutateUser };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/src/components/image/image-custom.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/src/components/layout/layout.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'theme' is assigned a value but never used.",
        "line": 19,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 19,
        "endColumn": 14
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/ban-ts-comment",
        "severity": 2,
        "message": "Do not use \"@ts-ignore\" because it alters compilation errors.",
        "line": 57,
        "column": 3,
        "nodeType": "Line",
        "messageId": "tsDirectiveComment",
        "endLine": 57,
        "endColumn": 16,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { ReactNode } from 'react';\nimport { Button, Toolbar, Typography } from '@mui/material';\nimport { makeStyles, useTheme } from '@mui/styles';\nimport { toast } from 'react-toastify';\nimport { Icon } from '@iconify/react';\nimport { ErrorMapCtx, z, ZodIssueOptionalMessage } from 'zod';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { TextFieldElement } from 'react-hook-form-mui';\nimport { logger } from '../../logger';\nimport ImageCustom from '../image/image-custom';\n\nexport type LayoutProps = {\n  children: ReactNode;\n};\n\nexport function Layout({ children }: LayoutProps) {\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const formSchema = z.object({\n    test0: z.string().min(2).max(20),\n    test1: z\n      .custom((data) => {\n        if (typeof data === 'string') {\n          return parseInt(data) <= 18;\n        }\n        return false;\n      })\n      .optional()\n  });\n\n  const customErrorMap = () => {\n    return (issue: ZodIssueOptionalMessage, ctx: ErrorMapCtx) => {\n      if (issue.code === z.ZodIssueCode.custom) {\n        if (issue.path.includes('test1')) {\n          return {\n            message: `It has to be between 1 and 18 or your age is ${issue.params}`\n          };\n        }\n      }\n      return { message: ctx.defaultError };\n    };\n  };\n\n  const { handleSubmit, control } = useForm({\n    resolver: zodResolver(formSchema, {\n      errorMap: customErrorMap()\n    }),\n    defaultValues: {\n      test0: '',\n      test1: ''\n    }\n  });\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const handleSubmitCreate = (data) => {\n    logger.log(data);\n  };\n\n  return (\n    <>\n      <Toolbar className={classes.topBarBottom}>\n        <ImageCustom\n          alt={'test'}\n          width=\"2050\"\n          src={'/img/test.png'}\n          localImage\n        />\n        <Icon icon=\"material-symbols:network-wifi-3-bar-rounded\" />\n        <Typography align=\"center\" variant=\"body2\" component=\"span\">\n          This is my Typography component\n        </Typography>\n        <Typography align=\"center\" variant=\"body2\" component=\"span\">\n          This is my Typography component\n        </Typography>\n        <Typography align=\"center\" variant=\"body2\" component=\"span\">\n          This is my Typography component\n        </Typography>\n        <Button\n          onClick={() => toast.error('test')}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          This is my Button component\n        </Button>\n      </Toolbar>\n      <main>\n        <div className={classes.root}>\n          <form\n            style={{ display: 'grid', width: '100%', gap: '10px' }}\n            onSubmit={handleSubmit((data) => handleSubmitCreate(data))}\n          >\n            <TextFieldElement\n              placeholder=\"e.g Test\"\n              control={control}\n              name=\"test0\"\n              label=\"Test 0\"\n              variant=\"outlined\"\n              fullWidth\n            />\n            <TextFieldElement\n              placeholder=\"e.g Test\"\n              control={control}\n              name=\"test1\"\n              label=\"Test 1\"\n              variant=\"outlined\"\n              fullWidth\n              required\n            />\n            <Button type={'submit'} variant={'contained'} color={'primary'}>\n              Submit\n            </Button>\n          </form>\n          {children}\n        </div>\n      </main>\n      <div className={classes.toggleBtn}>Bottom Bar</div>\n    </>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: '1600px',\n    margin: '0 auto',\n    background: theme.palette.background.default\n  },\n  topBarBottom: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    overflow: 'hidden'\n  },\n  toggleBtn: {\n    marginRight: 20,\n    display: 'block',\n    [theme.breakpoints.down('md')]: {\n      marginRight: 5,\n      display: 'none'\n    }\n  }\n}));\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/src/components/link/link.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/src/components/test/test.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'theme' is defined but never used.",
        "line": 22,
        "column": 31,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 36
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport { useRouter } from 'next/router';\nimport { Grid } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport { logger } from '../../logger';\n\nconst MyDummyComponentPage = () => {\n  const classes = useStyles();\n  const router = useRouter();\n\n  logger.log('router', router);\n\n  return (\n    <div className={classes.superRoot}>\n      <Grid container justifyContent=\"center\" display=\"flex\">\n        Content Me\n      </Grid>\n    </div>\n  );\n};\n\nconst useStyles = makeStyles((theme) => ({\n  superRoot: {\n    maxWidth: '2000px',\n    margin: '0 auto'\n  }\n}));\n\nexport default MyDummyComponentPage;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/src/emotion-cache/create-emotion-cache.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/src/image-proxy/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/src/image-proxy/types.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/ban-types",
        "severity": 2,
        "message": "Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.",
        "line": 2,
        "column": 40,
        "nodeType": "Identifier",
        "messageId": "bannedTypeMessage",
        "endLine": 2,
        "endColumn": 48,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/src/logger/environment.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/src/logger/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/src/logger/logger.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 4,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 4,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                82,
                85
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                82,
                85
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 4,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 4,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                106,
                109
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                106,
                109
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'message' is defined but never used.",
        "line": 18,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 36
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'optionalParams' is defined but never used.",
        "line": 18,
        "column": 41,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 55
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 18,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 18,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                427,
                430
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                427,
                430
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 18,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 18,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                451,
                454
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                451,
                454
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-empty-function",
        "severity": 2,
        "message": "Unexpected empty arrow function.",
        "line": 18,
        "column": 67,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "unexpected",
        "endLine": 18,
        "endColumn": 69,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 2,
        "message": "Unexpected console statement.",
        "line": 30,
        "column": 18,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 30,
        "endColumn": 31,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 2,
        "message": "Unexpected console statement.",
        "line": 39,
        "column": 17,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 39,
        "endColumn": 29,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 2,
        "message": "Unexpected console statement.",
        "line": 46,
        "column": 16,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 46,
        "endColumn": 27,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { LOG_LEVEL } from './environment';\n\nexport interface LogFn {\n  (message?: any, ...optionalParams: any[]): void;\n}\n\n/** Basic logger interface */\nexport interface Logger {\n  log: LogFn;\n  warn: LogFn;\n  error: LogFn;\n}\n\n/** Log levels */\nexport type LogLevel = 'log' | 'warn' | 'error';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function,@typescript-eslint/no-explicit-any\nconst NO_OP: LogFn = (message?: any, ...optionalParams: any[]) => {};\n\n/** Logger which outputs to the browser console */\nexport class ConsoleLogger implements Logger {\n  readonly log: LogFn;\n  readonly warn: LogFn;\n  readonly error: LogFn;\n\n  constructor(options?: { level?: LogLevel }) {\n    const { level } = options || {};\n\n    // eslint-disable-next-line no-console\n    this.error = console.error.bind(console);\n\n    if (level === 'error') {\n      this.warn = NO_OP;\n      this.log = NO_OP;\n\n      return;\n    }\n    // eslint-disable-next-line no-console\n    this.warn = console.warn.bind(console);\n\n    if (level === 'warn') {\n      this.log = NO_OP;\n      return;\n    }\n    // eslint-disable-next-line no-console\n    this.log = console.log.bind(console);\n  }\n}\n\nexport const logger = new ConsoleLogger({ level: LOG_LEVEL });\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/rabus/WebstormProjects/parkship/frontend/styles/theme/theme.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 42,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 42,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                766,
                769
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                766,
                769
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  }
]