[{"filePath":"/home/rabus/WebstormProjects/parkship/frontend/next-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/rabus/WebstormProjects/parkship/frontend/pages/500.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/rabus/WebstormProjects/parkship/frontend/pages/_app.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setMode' is assigned a value but never used.","line":31,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":23}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-empty-interface","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":82,"column":13,"nodeType":"Identifier","messageId":"noEmptyWithSuper","endLine":82,"endColumn":25,"fix":{"range":[2428,2467],"text":"type DefaultTheme = Theme"},"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-empty-interface */\nimport React, { useEffect, useState } from 'react';\nimport Head from 'next/head';\n\nimport { getDesignTokens } from '../styles/theme/theme';\nimport createEmotionCache from '../src/emotion-cache/create-emotion-cache';\nimport { CacheProvider, EmotionCache } from '@emotion/react';\nimport '../styles/globals.css';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { createTheme, Theme, ThemeProvider } from '@mui/material/styles';\nimport { CssBaseline, responsiveFontSizes } from '@mui/material';\nimport { AppProps } from 'next/app';\n\n// When using TypeScript 4.x and above\nimport { Layout } from '../src/components/layout/layout';\n\n// Client-side cache, shared for the whole session of the user in the browser.\nconst clientSideEmotionCache = createEmotionCache();\n\ntype AppPropsWithApm = AppProps & {\n  emotionCache?: EmotionCache;\n};\n\nconst App = ({\n  Component,\n  pageProps,\n  emotionCache = clientSideEmotionCache\n}: AppPropsWithApm) => {\n  const [mode, setMode] = useState('dark');\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n  }, [mode]);\n\n  const theme: Theme = React.useMemo(() => {\n    return responsiveFontSizes(createTheme(getDesignTokens(mode)));\n  }, [mode]);\n\n  return (\n    <React.Fragment>\n      <CacheProvider value={emotionCache}>\n        <Head>\n          <title>PM4 - Parkship</title>\n          <meta\n            name=\"viewport\"\n            content=\"minimum-scale=1, initial-scale=1, width=device-width\"\n          />\n          <meta name=\"description\" content=\"This is a project.\" />\n        </Head>\n        {mounted && (\n          <ThemeProvider theme={theme}>\n            <CssBaseline enableColorScheme>\n              <ToastContainer\n                position=\"bottom-right\"\n                autoClose={3000}\n                hideProgressBar={false}\n                newestOnTop={false}\n                closeOnClick\n                rtl={false}\n                pauseOnFocusLoss\n                draggable\n                pauseOnHover\n                limit={5}\n              />\n              <Layout>\n                <Component {...pageProps} />\n              </Layout>\n            </CssBaseline>\n          </ThemeProvider>\n        )}\n      </CacheProvider>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n\ndeclare module '@mui/styles/defaultTheme' {\n  interface DefaultTheme extends Theme {}\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/rabus/WebstormProjects/parkship/frontend/pages/_document.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2896,2899],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2896,2899],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2438,2441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2438,2441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport Document, { Head, Html, Main, NextScript } from 'next/document';\nimport createEmotionServer from '@emotion/server/create-instance';\nimport createEmotionCache from '../src/emotion-cache/create-emotion-cache';\n\nexport default class MyDocument extends Document {\n  render() {\n    return (\n      <Html lang=\"de\">\n        {/* SEO Part */}\n        <Head>\n          <link\n            rel=\"stylesheet\"\n            href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\"\n          />\n          <link rel=\"shortcut icon\" href=\"/favicon.ico\" />\n          <link rel=\"apple-touch-icon\" href=\"/icons/logo.jpg\" />\n          <meta name=\"robots\" content=\"all\" />\n          <meta name=\"googlebot\" content=\"noindex,nofollow\" />\n          <meta name=\"google\" content=\"nositelinkssearchbox\" />\n          <meta name=\"mobile-web-app-capable\" content=\"yes\" />\n          <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n          <link rel=\"apple-touch-icon\" href=\"/icons/logo.jpg\" />\n          <link rel=\"manifest\" href=\"/manifest.json\" />\n\n          <link\n            href=\"https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,400;0,500;0,700;1,700;1,900&display=swap\"\n            rel=\"stylesheet\"\n          />\n        </Head>\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n\n// `getInitialProps` belongs to `_document` (instead of `_app`),\n// it's compatible with static-site generation (SSG).\nMyDocument.getInitialProps = async (ctx) => {\n  // Resolution order\n  //\n  // On the server:\n  // 1. app.getInitialProps\n  // 2. page.getInitialProps\n  // 3. document.getInitialProps\n  // 4. app.render\n  // 5. page.render\n  // 6. document.render\n  //\n  // On the server with error:\n  // 1. document.getInitialProps\n  // 2. app.render\n  // 3. page.render\n  // 4. document.render\n  //\n  // On the client\n  // 1. app.getInitialProps\n  // 2. page.getInitialProps\n  // 3. app.render\n  // 4. page.render\n\n  const originalRenderPage = ctx.renderPage;\n\n  // You can consider sharing the same Emotion cache between all the SSR requests to speed up performance.\n  // However, be aware that it can have global side effects.\n  const cache = createEmotionCache();\n  const { extractCriticalToChunks } = createEmotionServer(cache);\n\n  ctx.renderPage = () =>\n    originalRenderPage({\n      /* eslint-disable-next-line */\n      enhanceApp: (App: any) =>\n        function EnhanceApp(props) {\n          return <App emotionCache={cache} {...props} />;\n        }\n    });\n\n  const initialProps = await Document.getInitialProps(ctx);\n  // This is important. It prevents Emotion to render invalid HTML.\n  // See https://github.com/mui/material-ui/issues/26561#issuecomment-855286153\n  const emotionStyles = extractCriticalToChunks(initialProps.html);\n  const emotionStyleTags = emotionStyles.styles.map((style: any) => (\n    <style\n      data-emotion={`${style.key} ${style.ids.join(' ')}`}\n      key={style.key}\n      dangerouslySetInnerHTML={{ __html: style.css }}\n    />\n  ));\n\n  return {\n    ...initialProps,\n    styles: [\n      ...React.Children.toArray(initialProps.styles),\n      ...emotionStyleTags\n    ]\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/rabus/WebstormProjects/parkship/frontend/pages/api/health.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/rabus/WebstormProjects/parkship/frontend/pages/api/image-logo-proxy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/rabus/WebstormProjects/parkship/frontend/pages/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ImageCustom' is defined but never used.","line":6,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":10,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useRouter } from 'next/router';\nimport { Button, Grid, Paper, Typography } from '@mui/material';\nimport { Icon } from '@iconify/react';\nimport { makeStyles } from '@mui/styles';\nimport ImageCustom from '../src/components/image/image-custom';\n\nconst Index = () => {\n  const classes = useStyles();\n  const router = useRouter();\n\n  return (\n    <div className={classes.superRoot}>\n      <Grid\n        className={classes.bottomButtons}\n        container\n        justifyContent=\"center\"\n        display=\"flex\"\n      >\n        <Grid item sm={3} xs={12}>\n          <Paper className={classes.buildPaper}>\n            <Icon className={classes.iconStats} icon=\"gridicons:create\" />\n            <Typography component={'span'} variant=\"h4\">\n              Landing\n            </Typography>\n          </Paper>\n        </Grid>\n        <Grid item sm={3} xs={12}>\n          <Paper className={classes.buildPaper}>\n            <Icon className={classes.iconStats} icon=\"wpf:create-new\" />\n            <Typography component={'span'} variant=\"h4\">\n              Experience\n            </Typography>\n          </Paper>\n        </Grid>\n        <Grid item sm={3} xs={12}>\n          <Paper className={classes.buildPaper}>\n            <Icon className={classes.iconStats} icon=\"akar-icons:lock-on\" />\n            <Typography component={'span'} variant=\"h4\">\n              Test Me\n            </Typography>\n          </Paper>\n        </Grid>\n        <Grid item sm={3} xs={12}>\n          <Paper className={classes.buildPaper}>\n            <Icon className={classes.iconStats} icon=\"tabler:parachute\" />\n            <Typography component={'span'} variant=\"h4\">\n              Today\n            </Typography>\n          </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nconst useStyles = makeStyles((theme) => ({\n  superRoot: {\n    maxWidth: '2000px',\n    margin: '0 auto'\n  },\n  root: {\n    alignItems: 'center',\n    maxHeight: '600px',\n    height: '65vh',\n    backgroundPosition: 'center',\n    [theme.breakpoints.down('md')]: {\n      backgroundPosition: 'initial',\n      height: '55vh'\n    },\n    textAlign: 'center'\n  },\n  imageSpinner: {\n    width: '345px',\n    height: '325px',\n    [theme.breakpoints.down('md')]: {\n      width: '150px',\n      height: '150px'\n    }\n  },\n  bottomButtons: {\n    marginBottom: '50px',\n    alignItems: 'center',\n    maxWidth: '2000px',\n    height: '15vh',\n    textAlign: 'center',\n    [theme.breakpoints.down('md')]: {\n      height: '40vh'\n    }\n  },\n  subBarTitle: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  buildPaper: {\n    background: `linear-gradient(270deg, ${theme.palette.primary.main} 20%, ${theme.palette.secondary.main} 80%)`,\n    borderRadius: '10px',\n    margin: '10px',\n    color: 'white',\n    padding: '20px',\n    textAlign: 'center',\n    display: 'flex',\n    justifyContent: 'space-evenly',\n    alignItems: 'center',\n    flexDirection: 'row',\n    '&:hover': {\n      margin: '50px',\n      transition: 'all 0.5s ease',\n      borderRadius: '20px'\n    }\n  },\n  icon: {\n    marginLeft: '10px',\n    width: '15px',\n    height: '15px',\n    [theme.breakpoints.up('md')]: { width: '25px', height: '25px' }\n  },\n  iconStats: {\n    width: '45px',\n    height: '45px',\n    [theme.breakpoints.down('md')]: { width: '25px', height: '25px' }\n  },\n  outerStatsBox: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  statsBox: {\n    width: '50px',\n    height: '50px',\n    display: 'grid',\n    borderRadius: '20%',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: '10px',\n    backgroundColor: theme.palette.primary.light,\n    [theme.breakpoints.down('md')]: {\n      marginTop: '20px'\n    }\n  },\n  statsContainer: {\n    display: 'flex',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n    padding: '20px'\n  }\n}));\n\nexport default Index;\n","usedDeprecatedRules":[]},{"filePath":"/home/rabus/WebstormProjects/parkship/frontend/src/components/image/image-custom.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/rabus/WebstormProjects/parkship/frontend/src/components/layout/layout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'theme' is assigned a value but never used.","line":12,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { ReactNode } from 'react';\nimport makeStyles from '@mui/styles/makeStyles';\nimport { Toolbar, Typography } from '@mui/material';\nimport { useTheme } from '@mui/styles';\n\nexport type LayoutProps = {\n  children: ReactNode;\n};\n\nexport function Layout({ children }: LayoutProps) {\n  const classes = useStyles();\n  const theme = useTheme();\n\n  return (\n    <>\n      <Toolbar className={classes.topBarBottom}>\n        <div className={classes.rightSide}>\n          <Typography component={'span'}>Header on Top</Typography>\n        </div>\n      </Toolbar>\n      <main>\n        <div className={classes.root}>{children}</div>\n      </main>\n      <div>Bottom Bar</div>\n    </>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: '1600px',\n    margin: '0 auto'\n  },\n  topBarBottom: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    overflow: 'hidden',\n    [theme.breakpoints.up('sm')]: {\n      display: 'none'\n    }\n  },\n  rightSide: { display: 'flex', alignItems: 'center' },\n  toggleBtn: {\n    marginRight: 20,\n    [theme.breakpoints.down('xs')]: {\n      marginRight: 5\n    }\n  }\n}));\n","usedDeprecatedRules":[]},{"filePath":"/home/rabus/WebstormProjects/parkship/frontend/src/components/link/link.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'theme' is defined but never used.","line":63,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":63,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import NextLink from 'next/link';\nimport { Link as MuiLink } from '@mui/material';\nimport { useRouter } from 'next/router';\nimport React, { FC } from 'react';\nimport makeStyles from '@mui/styles/makeStyles';\n\nexport interface LinkProps {\n  locale?: string;\n  href?: string;\n  children: React.ReactNode;\n  type?: 'link' | 'button';\n  skipLocaleHandling?: boolean;\n}\n\nconst Link: FC<LinkProps> = ({\n  locale = 'en',\n  href,\n  children,\n  skipLocaleHandling = false,\n  ...props\n}) => {\n  const classes = useStyles();\n  const router = useRouter();\n  const localeTemp = locale || router.query.locale || '';\n\n  let hrefLocal = href || router.asPath;\n  if (hrefLocal.indexOf('http') === 0) {\n    skipLocaleHandling = true;\n  }\n  if (locale && !skipLocaleHandling) {\n    if (typeof localeTemp === 'string') {\n      hrefLocal = hrefLocal\n        ? `/${localeTemp}${hrefLocal}`\n        : router.pathname.replace('[locale]', localeTemp);\n    }\n  }\n\n  if (skipLocaleHandling) {\n    return (\n      <a href={hrefLocal} target=\"_blank\" {...props}>\n        {children}\n      </a>\n    );\n  }\n\n  return (\n    <NextLink\n      {...props}\n      href={hrefLocal}\n      passHref\n      legacyBehavior\n      className={classes.nativeLink}\n    >\n      <MuiLink {...props} className={classes.nativeLink} href={hrefLocal}>\n        {children}\n      </MuiLink>\n    </NextLink>\n  );\n};\n\nexport default Link;\n\nconst useStyles = makeStyles((theme) => ({\n  nativeLink: {\n    textDecoration: 'none',\n    color: 'inherit'\n  }\n}));\n","usedDeprecatedRules":[]},{"filePath":"/home/rabus/WebstormProjects/parkship/frontend/src/emotion-cache/create-emotion-cache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/rabus/WebstormProjects/parkship/frontend/src/image-proxy/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/rabus/WebstormProjects/parkship/frontend/src/image-proxy/types.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/ban-types","severity":2,"message":"Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","line":2,"column":40,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":2,"endColumn":48,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/rabus/WebstormProjects/parkship/frontend/src/logger/environment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/rabus/WebstormProjects/parkship/frontend/src/logger/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/rabus/WebstormProjects/parkship/frontend/src/logger/logger.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[82,85],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[82,85],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[106,109],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[106,109],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'message' is defined but never used.","line":18,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'optionalParams' is defined but never used.","line":18,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":55}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[427,430],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[427,430],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[451,454],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[451,454],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":18,"column":67,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":18,"endColumn":69,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":30,"column":18,"nodeType":"MemberExpression","messageId":"unexpected","endLine":30,"endColumn":31,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":39,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":39,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":46,"column":16,"nodeType":"MemberExpression","messageId":"unexpected","endLine":46,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { LOG_LEVEL } from './environment';\n\nexport interface LogFn {\n  (message?: any, ...optionalParams: any[]): void;\n}\n\n/** Basic logger interface */\nexport interface Logger {\n  log: LogFn;\n  warn: LogFn;\n  error: LogFn;\n}\n\n/** Log levels */\nexport type LogLevel = 'log' | 'warn' | 'error';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function,@typescript-eslint/no-explicit-any\nconst NO_OP: LogFn = (message?: any, ...optionalParams: any[]) => {};\n\n/** Logger which outputs to the browser console */\nexport class ConsoleLogger implements Logger {\n  readonly log: LogFn;\n  readonly warn: LogFn;\n  readonly error: LogFn;\n\n  constructor(options?: { level?: LogLevel }) {\n    const { level } = options || {};\n\n    // eslint-disable-next-line no-console\n    this.error = console.error.bind(console);\n\n    if (level === 'error') {\n      this.warn = NO_OP;\n      this.log = NO_OP;\n\n      return;\n    }\n    // eslint-disable-next-line no-console\n    this.warn = console.warn.bind(console);\n\n    if (level === 'warn') {\n      this.log = NO_OP;\n      return;\n    }\n    // eslint-disable-next-line no-console\n    this.log = console.log.bind(console);\n  }\n}\n\nexport const logger = new ConsoleLogger({ level: LOG_LEVEL });\n","usedDeprecatedRules":[]},{"filePath":"/home/rabus/WebstormProjects/parkship/frontend/styles/theme/theme.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[766,769],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[766,769],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]